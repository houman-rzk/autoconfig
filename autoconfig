#!/bin/sh

# TODO:
#   Do not delete home dir if user exists

sudo_grp="wheel"

pacman_pkgs="xorg xorg-xinit libx11 libxinerama libxft fontconfig neovim dunst xclip task taskwarrior-tui libnotify imv clipmenu picom shellcheck zsh dash bc udisks2 zsh-syntax-highlighting zsh-autosuggestions xwallpaper slock alsa-utils pipewire wireplumber pulsemixer mpv mpd mpc ncmpcpp ffmpeg ffmpegthumbnailer imagemagick poppler unrar zathura zathura-pdf-mupdf zathura-djvu unzip docx2txt odt2txt catdoc gnumeric htop xdg-user-dirs tmux zip ttf-jetbrains-mono-nerd lf jq p7zip perl-image-exiftool socat xournalpp neomutt tor torbrowser-launcher urlscan gtop w3m python-pywal transmission-gtk pass firefox cpupower gnome-epub-thumbnailer hyprland waybar swaybg waylock nautilus grim foot wl-clipboard"

#optional_pacman_pkgs="mono go nodejs npm jdk-openjdk cmake gcc clang python3 python-neovim keepassxc xf86-video-nouveau xf86-video-intel mesa-utils ffprobe libreoffice xarchiver unclutter fzf wget calibre texlive-most biber texlive-bibtexextra zenity ntfs-3g redshift newsboat sqlite dos2unix python-pip pavucontrol yt-dlp"

aur_pkgs="gtk-theme-arc-gruvbox-git brillo ueberzugpp wl-clip-persist rofi-lbonn-wayland"

dotfiles_repo="https://github.com/houman-rzk/dotfiles"
repos="dwm st dmenu dwmblocks"
default_branch="master"

manage_user() {
    printf "Enter user name: "
    read -r user

    # User might exist but not have sudo permissions

    if id "$user" >/dev/null 2>&1
    then
        echo "User exists"
    else
        useradd -m "$user"
        echo "Enter password the new user \"$user\""
        passwd "$user" || exit 1
    fi

    usermod -aG wheel "$user"

    # Removes need for password for some commands
    add_newperms
}

install_yay() {
    echo "Refreshing pacman keys"
    rm -rf /etc/pacman.d/gnupg
    pacman-key --init >/dev/null 2>&1
    pacman-key --populate >/dev/null 2>&1
    pacman -S --noconfirm archlinux-keyring >/dev/null 2>&1

    echo "Installing yay"
    pacman -S --noconfirm base-devel go >/dev/null 2>&1
    [ -d /tmp/yay ] && rm -r /tmp/yay
    { sudo -u "$user" git clone https://aur.archlinux.org/yay.git /tmp/yay >/dev/null 2>&1 && cd /tmp/yay && sudo -u "$user" makepkg --noconfirm -si >/dev/null 2>&1 ;} || echo "Failed to install yay"
}

install_pkgs() {
    echo "Installing packages"
	  pacman -S --noconfirm $pacman_pkgs
	  sudo -u "$user" yay -S --noconfirm $aur_pkgs
    echo "Finished installing packages"
}

build_repos() {
    [ ! -d "/home/$user/.local/src" ] && sudo -u "$user" mkdir -p "/home/$user/.local/src"

    for r in $repos ; do
        [ -d "/home/$user/.local/src/$r" ] && rm -r "/home/$user/.local/src/$r"
        echo "Cloning '$r'"
	    sudo -u "$user" git clone "https://github.com/houman-rzk/$r" "/home/$user/.local/src/$r" >/dev/null 2>&1
        echo "Building '$r'"
	    sudo -u "$user" make -C /home/"$user"/.local/src/"$r" >/dev/null 2>&1 && make -C /home/"$user"/.local/src/"$r" clean install >/dev/null 2>&1
    done
}

source_dotfiles() {
    [ -f /tmp/profile.tmp ] && rm /tmp/profile.tmp
    head -n -1 /home/$user/.config/shell/profile > /tmp/profile.tmp
    HOME=/home/"$user"
    . /tmp/profile.tmp >/dev/null 2>&1
    rm /tmp/profile.tmp
}

install_dotfiles() {
    rm -r "/home/$user"/* >/dev/null 2>&1 ; rm -r "/home/$user"/.* >/dev/null 2>&1
    sudo -u "$user" git config --global init.defaultbranch "$default_branch"
    echo "Fetching dotfiles..."
    sudo -u "$user" git init /home/"$user"/ >/dev/null 2>&1 && cd /home/"$user"/ && sudo -u "$user" git remote add origin "$dotfiles_repo" >/dev/null 2>&1 && sudo -u "$user" git pull --force origin master >/dev/null 2>&1
}

install_oh_my_zsh() {
    echo "Installing oh-my-zsh..."

    source_dotfiles

    [ -d "$ZSH" ] && rm -r "$ZSH"
    sudo -u "$user" ZSH="$ZSH" sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended >/dev/null 2>&1
    [ -f /home/"$user"/.zshrc ] && rm /home/"$user"/.zshrc*
}

set_backlight_rules() {
    echo "Setting backlight rules"
    echo "RUN+=\"/bin/chgrp $sudo_grp /sys/class/backlight/intel_backlight/brightness\"" > /etc/udev/rules.d/backlight.rules
    printf "\n" >> /etc/udev/rules.d/backlight.rules
    echo "RUN+=\"/bin/chmod g+w /sys/class/backlight/intel_backlight/brightness\"" >> /etc/udev/rules.d/backlight.rules
}

add_tap_to_click() {
    [ ! -f /etc/X11/xorg.conf.d/40-libinput.conf ] && printf 'Section "InputClass"
        Identifier "libinput touchpad catchall"
        MatchIsTouchpad "on"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
        #Enable left mouse button by tapping
    Option "Tapping" "on"
EndSection' > /etc/X11/xorg.conf.d/40-libinput.conf
}

add_newperms() {
    echo "Adding new permissions"
    printf "\n" >> /etc/sudoers
    echo "%wheel ALL=(ALL) NOPASSWD:/usr/bin/shutdown,/usr/bin/shutdown -h now,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman,/usr/bin/pacman -S,/usr/bin/pacman -Syu,/usr/bin/systemctl restart NetworkManager,/usr/bin/cpupower" >> /etc/sudoers
}

final_touch() {
    # Install oh-my-zsh
    install_oh_my_zsh
    
    # Sets backlight device rules
    set_backlight_rules
    
    # Adds tap-to-click
    add_tap_to_click

    echo "Adding the final touch..."
    sudo -u "$user" amixer sset Master unmute >/dev/null 2>&1
    sudo -u "$user" amixer sset 'Auto-Mute Mode' Enabled >/dev/null 2>&1
    rm /bin/sh ; ln -s /bin/dash /bin/sh
    usermod "$user" -s /bin/zsh >/dev/null 2>&1
    [ -f /home/"$user"/.gitconfig ] && rm /home/"$user"/.gitconfig

    # npm cleanup
    npm config set cache "$XDG_CACHE_HOME/npm" --global >/dev/null 2>&1
    [ -d "/home/$user/.npm" ] && rm -r "/home/$user/.npm" >/dev/null 2>&1

    source_dotfiles

    # Creates some files and directories
    [ ! -f "$HISTFILE" ] && sudo -u "$user" mkdir "$XDG_DATA_HOME/shell" >/dev/null 2>&1 ; sudo -u "$user" touch "$HISTFILE"
    [ ! -d "$XDG_CACHE_HOME" ] && sudo -u "$user" mkdir -p "$XDG_CACHE_HOME"
    [ ! -d "$XDG_DATA_HOME/mpd/playlists" ] && sudo -u "$user" mkdir -p "$XDG_DATA_HOME/mpd/playlists"

    # Disable power button action
    printf "HandlePowerKey=ignore\n" >> /etc/systemd/logind.conf
    systemctl kill -s HUP systemd.logind
}

# Set user
manage_user

# Install yay
install_yay

# Install packages
install_pkgs

# Install the dotfiles
install_dotfiles

# Fetch and install other software
build_repos

# Running the last commands
final_touch

# Logout
kill -9 -1
