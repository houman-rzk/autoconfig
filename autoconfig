#!/bin/sh

user="hache"
sudo_grp="wheel"

pacman_pkgs="xorg xorg-xinit base-devel libx11 libxinerama libxft fontconfig freetype2 gnu-free-fonts neovim dunst xclip alsa-utils task taskwarrior-tui libnotify noto-fonts-emoji sxiv clipmenu picom shellcheck zsh dash bc udisks2 zsh-syntax-highlighting zsh-autosuggestions xwallpaper slock alsa pulseaudio pulseaudio-alsa pulsemixer mpv mpd mpc ncmpcpp xdotool openssh ffmpeg ffmpegthumbnailer imagemagick poppler unrar ffprobe zathura zathura-pdf-mupdf ueberzug unzip docx2txt odt2txt catdoc gnumeric ufw htop xdg-user-dirs tmux zip"

optional_pacman_pkgs="transmission-gtk mono go nodejs npm jdk-openjdk cmake gcc clang python3 python-neovim keepassxc xf86-video-nouveau xf86-video-intel mesa-utils ffprobe gnome-epub-thumbnailer perl-image-exiftool zathura-djvu libreoffice xarchiver unclutter wget fzf jq wget otf-ipafont noto-fonts-cjk urlscan noto-fonts neomutt calibre w3m texlive-most biber texlive-bibtexextra zenity ntfs-3g yt-dlp tor torbrowser-launcher firefox redshift newsboat gtop feh cpupower rsync stalonetray network-manager-applet networkmanager-openvpn xournalpp sqlite dos2unix python-pip python-pywal pavucontrol socat torsocks geckodriver"

aur_pkgs="lf nerd-fonts-bitstream-vera-mono gtk-theme-arc-gruvbox-git 7-zip nsxiv"
optional_aur_pkgs="brillo vimv-git wkhtmltopdf"
optional_npm_pkgs="peerflix castnow"

dotfiles_repo="https://github.com/houman-rzk/dotfiles"
repos="dwm st dmenu dwmblocks"
default_branch="master"


install_yay() {
    [ -d /tmp/yay ] && rm -r /tmp/yay
    echo "Installing yay"
    { sudo -u "$user" git clone https://aur.archlinux.org/yay.git /tmp/yay >/dev/null 2>&1 && cd /tmp/yay && sudo -u "$user" makepkg --noconfirm -si >/dev/null 2>&1 ;} || echo "Failed to install yay"
}

install_pacman_pkgs() {
    rm -rf /etc/pacman.d/gnupg
    pacman-key --init
    pacman-key --populate

    pacman -Syu --noconfirm

    for p in $pacman_pkgs ; do
        echo "Installing '$p'"
	    pacman -S --noconfirm "$p" >/dev/null 2>&1
    done
}

install_aur_pkgs() {
    yay -Syu --noconfirm

    for p in $yay_pkgs ; do
        echo "Installing '$p' (AUR)"
	    sudo -u "$user" yay -S --noconfirm "$p" >/dev/null 2>&1
    done
}

build_repos() {
    [ ! -d "/home/$user/.local/src" ] && sudo -u "$user" mkdir -p "/home/$user/.local/src"

    for r in $repos ; do
        [ -d "/home/$user/.local/src/$r" ] && rm -r "/home/$user/.local/src/$r"
        echo "Cloning '$r'"
	    sudo -u "$user" git clone "https://github.com/houman-rzk/$r" "/home/$user/.local/src/$r" >/dev/null 2>&1
        echo "Building '$r'"
	    sudo -u "$user" make -C /home/"$user"/.local/src/"$r" >/dev/null 2>&1 && make -C /home/"$user"/.local/src/"$r" clean install >/dev/null 2>&1
    done
}

source_dotfiles() {
    [ -f /tmp/profile.tmp ] && rm /tmp/profile.tmp
    head -n -1 /home/$user/.config/shell/profile > /tmp/profile.tmp
    HOME=/home/"$user"
    . /tmp/profile.tmp >/dev/null 2>&1
    rm /tmp/profile.tmp
}

install_dotfiles() {
    rm -r "/home/$user"/* >/dev/null 2>&1 ; rm -r "/home/$user"/.* >/dev/null 2>&1
    sudo -u "$user" git config --global init.defaultbranch "$default_branch"
    echo "Fetching dotfiles..."
    sudo -u "$user" git init /home/"$user"/ >/dev/null 2>&1 && cd /home/"$user"/ && sudo -u "$user" git remote add origin "$dotfiles_repo" >/dev/null 2>&1 && sudo -u "$user" git pull --force origin master >/dev/null 2>&1
}

install_oh_my_zsh() {
    echo "Installing oh-my-zsh..."

    # Source the dotfiles
    source_dotfiles

    [ -d "$ZSH" ] && rm -r "$ZSH"
    sudo -u "$user" ZSH="$ZSH" sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended >/dev/null 2>&1
    [ -f /home/"$user"/.zshrc ] && rm /home/"$user"/.zshrc*
}

set_backlight_rules() {
    echo "Setting backlight rules"
    echo "RUN+=\"/bin/chgrp $sudo_grp /sys/class/backlight/intel_backlight/brightness\"" > /etc/udev/rules.d/backlight.rules
    printf "\n" >> /etc/udev/rules.d/backlight.rules
    echo "RUN+=\"/bin/chmod g+w /sys/class/backlight/intel_backlight/brightness\"" >> /etc/udev/rules.d/backlight.rules
}

add_tap_to_click() {
    [ ! -f /etc/X11/xorg.conf.d/40-libinput.conf ] && printf 'Section "InputClass"
        Identifier "libinput touchpad catchall"
        MatchIsTouchpad "on"
        MatchDevicePath "/dev/input/event*"
        Driver "libinput"
        #Enable left mouse button by tapping
    Option "Tapping" "on"
EndSection' > /etc/X11/xorg.conf.d/40-libinput.conf
}

add_newperms() {
    echo "Adding new permissions"
    printf "\n" >> /etc/sudoers
    echo "%wheel ALL=(ALL) NOPASSWD:/usr/bin/shutdown,/usr/bin/shutdown -h now,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman,/usr/bin/pacman -S,/usr/bin/pacman -Syu,/usr/bin/systemctl restart NetworkManager,/usr/bin/cpupower" >> /etc/sudoers
}

final_touch() {
    echo "Adding the final touch..."
    sudo -u "$user" amixer sset Master unmute >/dev/null 2>&1
    sudo -u "$user" amixer sset 'Auto-Mute Mode' Enabled >/dev/null 2>&1
    rm /bin/sh ; ln -s /bin/dash /bin/sh
    usermod "$user" -s /bin/zsh >/dev/null 2>&1
    [ -f /home/"$user"/.gitconfig ] && rm /home/"$user"/.gitconfig

    # npm cleanup
    npm config set cache "$XDG_CACHE_HOME/npm" --global >/dev/null 2>&1
    [ -d "/home/$user/.npm" ] && rm -r "/home/$user/.npm" >/dev/null 2>&1

    # Source dotfiles
    source_dotfiles

    # Creates some files and directories
    [ ! -f "$HISTFILE" ] && sudo -u "$user" mkdir "$XDG_DATA_HOME/shell" >/dev/null 2>&1 ; sudo -u "$user" touch "$HISTFILE"
    #[ ! -d "/home/$user/Downloads" ] && sudo -u "$user" mkdir "/home/$user/Downloads"
    [ ! -d "$XDG_CACHE_HOME" ] && sudo -u "$user" mkdir -p "$XDG_CACHE_HOME"
    [ ! -d "$XDG_CACHE_HOME/neomutt" ] && { sudo -u "$user" mkdir -p "$XDG_CACHE_HOME/neomutt/headers" ; sudo -u "$user" mkdir -p "$XDG_CACHE_HOME/neomutt/messages" ;}
    [ ! -d "$XDG_DATA_HOME/mpd/playlists" ] && sudo -u "$user" mkdir -p "$XDG_DATA_HOME/mpd/playlists"

    # Sets default apps
    sudo -u "$user" xdg-mime default org.pwmt.zathura.desktop application/pdf

    # Enable some services
    ufw enable
    systemctl enable ufw

    # Config
    ufw default deny
    ufw allow Transmission
    ufw logging off
}


# Install pacman packages
install_pacman_pkgs

# Install yay
install_yay

# Install AUR packages
install_aur_pkgs

# Install the dotfiles
install_dotfiles

# Fetch and install other software
build_repos

# Install oh-my-zsh
install_oh_my_zsh

# Sets backlight device rules
set_backlight_rules

# Removes need for password for some commands
add_newperms

# Adds tap-to-click
add_tap_to_click

# Running the last commands
final_touch

# Logout
kill -9 -1
